{"version":3,"sources":["socket/index.ts","containers/feeds/KillFeed.tsx","pages/Feed.tsx","containers/boss/assets/fire-boss.svg","containers/boss/BossHeath.tsx","pages/Boss.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","io","KillFeed","props","useEffect","on","message","placement","duration","displayFeed","off","notification","open","key","Math","random","toString","style","borderRadius","width","closeIcon","FeedPage","BossHeath","useState","boss","setBoss","info","undefined","className","src","bossImage","percent","hp","size","status","showInfo","BossPage","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAEeA,E,MADAC,GAAG,kB,OC4CHC,EAhCE,SAACC,GACdC,qBAAU,WAKN,OAJAJ,EAAOK,GAAG,gBAAgB,SAACC,EAAiBC,EAAmBC,GAC3DC,EAAYH,EAASC,EAAoCC,MAGtD,WACHR,EAAOU,IAAI,mBAEhB,IAEH,IAAMD,EAAc,SAACH,EAAiBC,EAAmCC,GACrEG,IAAaC,KAAK,CACdC,IAAKC,KAAKC,SAASC,WACnBV,UACAC,YACAC,WACAS,MAAO,CACHC,aAAc,MACdC,MAAO,QAEXC,UAAW,WACP,OAAO,4BAKnB,OACI,yBC1BOC,EARE,SAAClB,GACd,OACI,8BACI,cAAC,EAAD,O,iBCVG,MAA0B,sCC2D1BmB,G,OA3CG,SAACnB,GAAkB,IAAD,EACRoB,qBADQ,mBACzBC,EADyB,KACnBC,EADmB,KAkBhC,OAfArB,qBAAU,WASN,OARAJ,EAAOK,GAAG,eAAe,SAACqB,GACtBD,EAAQC,MAGZ1B,EAAOK,GAAG,mBAAmB,WACzBoB,OAAQE,MAGL,WACH3B,EAAOU,IAAI,eACXV,EAAOU,IAAI,sBAEhB,IAGC,mCACI,sBACIkB,UAAW,SAAWJ,EAAO,GAAK,QAClCP,MAAO,CACHE,MAAO,QAHf,UAMI,qBACIF,MAAO,CACHE,MAAO,QAEXU,IAAKC,IAET,cAAC,IAAD,CACIC,QAAO,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,GACfC,KAAK,QACLC,OAAO,YACPC,UAAU,WCrCfC,EARE,SAACjC,GACd,OACI,8BACI,cAAC,EAAD,OCIGkC,MATf,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWlB,IAC/B,cAAC,IAAD,CAAOiB,KAAK,QAAQC,UAAWH,QCKtBI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86907128.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nconst socket = io(\"localhost:8080\"); \r\nexport default socket;","import React, { useEffect } from 'react'\r\nimport { notification } from 'antd';\r\nimport './assets/index.css';\r\nimport socket from '../../socket';\r\nimport { NotificationPlacement } from 'antd/lib/notification';\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\n// ☠️\r\n// 🗡️\r\n// 🛡️\r\nconst KillFeed = (props: Props) => {\r\n    useEffect(() => {\r\n        socket.on(\"feed:message\", (message: string, placement: string, duration: number) => {\r\n            displayFeed(message, placement as NotificationPlacement, duration)\r\n        })\r\n        \r\n        return () => {\r\n            socket.off(\"feed:message\")\r\n        }\r\n    }, [])\r\n\r\n    const displayFeed = (message: string, placement: NotificationPlacement , duration: number) => {\r\n        notification.open({\r\n            key: Math.random().toString(),\r\n            message,\r\n            placement,\r\n            duration,\r\n            style: {\r\n                borderRadius: '6px',\r\n                width: \"100%\"\r\n            },\r\n            closeIcon: () => {\r\n                return <div />\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div />\r\n    )\r\n}\r\n\r\nexport default KillFeed\r\n","import React from 'react'\r\nimport KillFeed from '../containers/feeds/KillFeed'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst FeedPage = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <KillFeed />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeedPage\r\n","export default __webpack_public_path__ + \"static/media/fire-boss.a4c364cb.svg\";","import React, { useEffect, useState } from 'react'\r\nimport { Progress } from 'antd'\r\nimport bossImage from './assets/fire-boss.svg'\r\nimport socket from '../../socket'\r\nimport './assets/index.css'\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface BossInfo {\r\n    hp: number\r\n    max_hp: number\r\n    level: number\r\n}\r\n\r\nconst BossHeath = (props: Props) => {\r\n    const [boss, setBoss] = useState<BossInfo | undefined>();\r\n\r\n    useEffect(() => {\r\n        socket.on(\"boss:update\", (info: BossInfo) => {\r\n            setBoss(info)\r\n        })\r\n\r\n        socket.on(\"boss:eliminated\", () => {\r\n            setBoss(undefined)\r\n        })\r\n\r\n        return () => {\r\n            socket.off(\"boss:update\")\r\n            socket.off(\"boss:eliminated\")\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={\"boss \" + (boss ? \"\" : \"hide\")}\r\n                style={{\r\n                    width: '25vw'\r\n                }}\r\n            >\r\n                <img\r\n                    style={{\r\n                        width: '100%'\r\n                    }}\r\n                    src={bossImage}\r\n                />\r\n                <Progress\r\n                    percent={boss?.hp}\r\n                    size=\"small\"\r\n                    status=\"exception\"\r\n                    showInfo={false}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BossHeath\r\n","import React from 'react'\r\nimport BossHeath from '../containers/boss/BossHeath'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst BossPage = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <BossHeath />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BossPage\r\n","import './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport FeedPage from './pages/Feed';\nimport BossPage from './pages/Boss';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/feed\" component={FeedPage} />\n      <Route path=\"/boss\" component={BossPage} />\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}